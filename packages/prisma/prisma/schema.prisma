// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  output   = "../dist/client"
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum StatusOrder {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  DELIVERING
  SUCCESS
  ERROR
}

enum StatusEmailTokens {
  PENDING
  VERIFIED
  SUCCESS
  EXPIRED
  ERROR
}

enum StatusDeliveryTokens {
  PENDING
  DELIVERING
  DELIVERED
  REJECTED
  ERROR
}

enum ActionRole {
  CREATE
  EDIT
  DELETE
}

enum StatusPayment {
  FAILED
  SUCCESS
  ERROR
}

enum TypePayment {
  QRCODE_CHECK
}

enum ActionStock {
  EDIT
  INCREASE
  DECREASE
  CREATE
  DELETE
  ENABLE
  DISABLE
}

enum ActionLogin {
  Login
  FORGOTPASSWORD
}

enum StatusLogin {
  PENDING
  SUCCESS
  EXPIRED
  ERROR
}

model users {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  profile_img  String
  password     String
  username     String
  role         role           @relation("UserRole", fields: [roleId], references: [id])
  roleId       Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  Order        order[]
  emailTokens  emailTokens[]
  logLogin     logLogin[]
  logRole      logRole[]      @relation("actionBy")
  logRole2     logRole[]      @relation("getuser")
  logBroadcast logBroadcast[]
  logStock     logStock[]
}

model role {
  id         Int       @id @default(autoincrement())
  name       String
  permission Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  users users[] @relation("UserRole")
}

model order {
  id              Int             @id @default(autoincrement())
  user            users           @relation(fields: [userId], references: [id])
  userId          Int
  Customer        customer        @relation(fields: [customer_Lineid], references: [UserID])
  customer_Lineid String
  orderlist       Json
  message         String?
  address         String?
  totalprice      Float
  quantity        Int
  status          StatusOrder
  payments        payment         @relation(fields: [paymentId], references: [id])
  paymentId       Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deliveryToken   deliveryToken[]
}

model payment {
  id          Int           @id @default(autoincrement())
  price       Float
  bank_type   String
  type        TypePayment
  status      StatusPayment
  transaction String?
  respone     Json
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?

  order order[]
}

model product {
  id          Int        @id @default(autoincrement())
  name        String
  img_product String?
  info        String?
  price       Float
  quantity    Int
  status      Boolean
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  logStock    logStock[]
}

model broadcast {
  id            Int      @id @default(autoincrement())
  img_broadcast String?
  message       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model customer {
  UserID      String  @unique
  displayName String
  pictureUrl  String?
  Order       order[]
}

model emailTokens {
  id        Int               @id @default(autoincrement())
  user      users             @relation(fields: [userId], references: [id])
  userId    Int
  token     String
  status    StatusEmailTokens @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model deliveryToken {
  id        Int                  @id @default(autoincrement())
  token     String
  order     order                @relation(fields: [orderId], references: [id])
  orderId   Int
  status    StatusDeliveryTokens @default(PENDING)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model logStock {
  id        Int         @id @default(autoincrement())
  user      users       @relation(fields: [userId], references: [id])
  userId    Int
  product   product     @relation(fields: [productId], references: [id])
  productId Int
  details   String?
  action    ActionStock
  quantity  Int
  IP        String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model logLogin {
  id        Int         @id @default(autoincrement())
  user      users       @relation(fields: [userId], references: [id])
  userId    Int
  action    ActionLogin
  status    StatusLogin
  IP        String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model logRole {
  id         Int        @id @default(autoincrement())
  user       users      @relation("getuser", fields: [userId], references: [id])
  userId     Int
  action     ActionRole
  before     String?
  after      String?
  actionBy   users      @relation("actionBy", fields: [actionById], references: [id])
  actionById Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model logBroadcast {
  id                Int      @id @default(autoincrement())
  user              users    @relation(fields: [userId], references: [id])
  userId            Int
  broadcast_img     String?
  broadcast_message String?
  amount_customer   Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
